<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Reflection" #>
<#@ import namespace="System.Diagnostics" #>
<#@ import namespace="System.IO" #>
<#@ assembly name="$(ProjectDir)\bin\Debug\Bbing.Domain.dll" #>
<#@ import namespace="Bbing.Domain.BaseModel" #>
<#@ include file="T4Toolbox.tt" #>
<#@ include file="Bbing_Template_Repository.tt" #>
<#@ include file="Bbing_Template_Service.tt" #>
<#@ output extension=".cs" #>

<#
    string solutionsPath = Host.ResolveAssemblyReference("$(SolutionDir)");  
    string projectPath = Host.ResolveAssemblyReference("$(ProjectDir)");  
	string destPath_Repository = Path.Combine(projectPath, "IRepositories/t4");
	string destPath_Service = Path.Combine(projectPath, "Service/t4");
#>

<#
	var types = Assembly.LoadFrom(projectPath + @"\bin\Debug\Bbing.Domain.dll").GetTypes();
	foreach (var item in types)
	{
		string className = item.Name;
		if(item.GetInterface("IAggregateRoot") != null && className != "AggregateRoot")
		{
			Bbing_Template_Repository template = new Bbing_Template_Repository(className);
			string fileName = string.Format(@"{0}\{1}.cs", destPath_Repository, $"I{className}Repository");
			template.Output.Encoding = Encoding.UTF8;
			template.RenderToFile(fileName);

			Bbing_Template_Service templateService = new Bbing_Template_Service(className);
		    fileName = string.Format(@"{0}\{1}.cs", destPath_Service, $"I{className}Service");
			templateService.Output.Encoding = Encoding.UTF8;
			templateService.RenderToFile(fileName);
		}
	}
#>